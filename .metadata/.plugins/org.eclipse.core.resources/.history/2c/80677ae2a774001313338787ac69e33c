package com.wdh.nodes;

import java.util.ArrayList;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.scenes.scene2d.Actor;

public class NodesGame implements ApplicationListener {
	
	public static int resW = 800;
	public static int resH = 600;
	
	public static float currTime = 0; 

	OrthographicCamera camera;
	SpriteBatch batch;
	ShapeRenderer sr;
	Actor guy;
	ArrayList<Node> nodes = new ArrayList<Node>();
	
	@Override
	public void create() {
		camera = new OrthographicCamera();
		camera.setToOrtho(false, resW, resH);
		batch = new SpriteBatch();
		
		guy = new Actor();
//		int count = 0;
//		for(int i = 100; i < resW - 100; i += 50) {
//			for(int j = 100; j < resH - 100; j += 50) {
//				if((Math.random() * 10) <= 2) {
//					nodes.add(new Node(100));
//					nodes.get(count).ranPos(i, i + 100, j, j + 100);
//					nodes.get(count++).setRadius((float) (Math.random() * 20) + 5);
//				}
//			}
//		}
		sr = new ShapeRenderer();
	}

	@Override
	public void render() {
		Gdx.gl.glClearColor(0, 0, 0.2f, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		currTime += Gdx.graphics.getDeltaTime();
		
		camera.update();

		batch.setProjectionMatrix(camera.combined);
		
//		sr.begin(ShapeType.Line);
//		sr.setColor(1, 1, 0, 1);
//		sr.line(test.x, test.y, 0, 0);
//		sr.end();
		
		Vector3 mouseTouchPos = new Vector3();
		mouseTouchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
		camera.unproject(mouseTouchPos);
		for(int i = 0; i < nodes.size(); i++) {
			if(nodes.get(i).contains(mouseTouchPos.x, mouseTouchPos.y) & Gdx.input.isTouched()) {
				nodes.get(i).subHealth(20);
			}
		}
		
		batch.begin();
		for(int i = 0; i < nodes.size(); i++)
		{
			nodes.get(i).update(batch);
		}
		batch.end();
	}

	@Override
	public void dispose() {
		batch.dispose();
		
		for(int i = 0; i < nodes.size(); i++)
		{
			nodes.get(i).dispose();
		}
	}

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
